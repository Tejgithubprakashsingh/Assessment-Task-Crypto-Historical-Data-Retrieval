{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ml_model.py\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "import pickle\n",
    "\n",
    "def train_model(data, variable1, variable2):\n",
    "    # Define the target variables\n",
    "    target_high = f\"%_Diff_From_High_Next_{variable2}_Days\"\n",
    "    target_low = f\"%_Diff_From_Low_Next_{variable2}_Days\"\n",
    "    \n",
    "    # Define the feature columns based on variable1\n",
    "    features = [\n",
    "        f\"Days_Since_High_Last_{variable1}_Days\",\n",
    "        f\"%_Diff_From_High_Last_{variable1}_Days\",\n",
    "        f\"Days_Since_Low_Last_{variable1}_Days\",\n",
    "        f\"%_Diff_From_Low_Last_{variable1}_Days\"\n",
    "    ]\n",
    "    \n",
    "    # Drop rows with NaN values to ensure clean data for training\n",
    "    data = data.dropna(subset=features + [target_high, target_low])\n",
    "    \n",
    "    # Split into features (X) and targets (y)\n",
    "    X = data[features]\n",
    "    y_high = data[target_high]\n",
    "    y_low = data[target_low]\n",
    "    \n",
    "    # Split the data into training and testing sets\n",
    "    X_train, X_test, y_high_train, y_high_test, y_low_train, y_low_test = train_test_split(\n",
    "        X, y_high, y_low, test_size=0.2, random_state=42\n",
    "    )\n",
    "    \n",
    "    # Initialize models for both targets\n",
    "    model_high = RandomForestRegressor(random_state=42)\n",
    "    model_low = RandomForestRegressor(random_state=42)\n",
    "    \n",
    "    # Train models\n",
    "    model_high.fit(X_train, y_high_train)\n",
    "    model_low.fit(X_train, y_low_train)\n",
    "    \n",
    "    # Evaluate models\n",
    "    y_high_pred = model_high.predict(X_test)\n",
    "    y_low_pred = model_low.predict(X_test)\n",
    "    \n",
    "    high_mae = mean_absolute_error(y_high_test, y_high_pred)\n",
    "    low_mae = mean_absolute_error(y_low_test, y_low_pred)\n",
    "    \n",
    "    print(f\"Mean Absolute Error for %_Diff_From_High_Next_{variable2}_Days: {high_mae}\")\n",
    "    print(f\"Mean Absolute Error for %_Diff_From_Low_Next_{variable2}_Days: {low_mae}\")\n",
    "    \n",
    "    # Save models\n",
    "    with open(\"model_high.pkl\", \"wb\") as f:\n",
    "        pickle.dump(model_high, f)\n",
    "    with open(\"model_low.pkl\", \"wb\") as f:\n",
    "        pickle.dump(model_low, f)\n",
    "    \n",
    "    return model_high, model_low, high_mae, low_mae\n",
    "\n",
    "def predict_outcomes(model_high, model_low, input_data):\n",
    "    # Ensure input_data is a DataFrame\n",
    "    input_df = pd.DataFrame([input_data])\n",
    "    \n",
    "    # Predict outcomes\n",
    "    high_prediction = model_high.predict(input_df)\n",
    "    low_prediction = model_low.predict(input_df)\n",
    "    \n",
    "    return high_prediction[0], low_prediction[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'ml_model'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[2], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m# main.py\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpandas\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mpd\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mml_model\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m train_model, predict_outcomes\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdatetime\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m datetime\n\u001b[0;32m      6\u001b[0m \u001b[38;5;66;03m# Load and prepare your data as before\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'ml_model'"
     ]
    }
   ],
   "source": [
    "# main.py\n",
    "import pandas as pd\n",
    "from ml_model import train_model, predict_outcomes\n",
    "from datetime import datetime\n",
    "\n",
    "# Load and prepare your data as before\n",
    "api_key = \"YOUR_API_KEY\"\n",
    "df = fetch_crypto_data(\"BTC/USD\", \"2023-01-01\", api_key)\n",
    "variable1 = 7\n",
    "variable2 = 5\n",
    "df_with_metrics = calculate_metrics(df, variable1, variable2)\n",
    "\n",
    "# Train the model\n",
    "model_high, model_low, high_mae, low_mae = train_model(df_with_metrics, variable1, variable2)\n",
    "\n",
    "# Predict with new input data (replace with real input values)\n",
    "input_data = {\n",
    "    f\"Days_Since_High_Last_{variable1}_Days\": 2,\n",
    "    f\"%_Diff_From_High_Last_{variable1}_Days\": -3.5,\n",
    "    f\"Days_Since_Low_Last_{variable1}_Days\": 1,\n",
    "    f\"%_Diff_From_Low_Last_{variable1}_Days\": 4.1\n",
    "}\n",
    "high_pred, low_pred = predict_outcomes(model_high, model_low, input_data)\n",
    "\n",
    "print(f\"Predicted % Diff From High Next {variable2} Days: {high_pred}\")\n",
    "print(f\"Predicted % Diff From Low Next {variable2} Days: {low_pred}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
